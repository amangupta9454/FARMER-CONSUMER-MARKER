import React, { useState } from "react";
import {
  FaSearchLocation,
  FaTemperatureHigh,
  FaCloud,
  FaTint,
  FaWind,
  FaSun,
  FaRegClock,
  FaCompressArrowsAlt,
  FaMapMarkerAlt,
  FaExclamationTriangle,
} from "react-icons/fa";
import axios from "axios";
import backgroundImage from "../assets/1.jpg"; // Adjust path if needed

const WeatherApp = () => {
  const [location, setLocation] = useState("");
  const [weatherData, setWeatherData] = useState([]);
  const [currentWeather, setCurrentWeather] = useState(null);
  const [lang, setLang] = useState("en");
  const [unit, setUnit] = useState("metric");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const translations = {
    en: {
      heading: "ЁЯМ╛ Farmer-Friendly Weather App",
      placeholder: "Enter Pincode / Village / District",
      search: "Search",
      geolocation: "Use My Location",
      error: "Location not found. Please enter a valid pincode, village, or district name.",
      networkError: "Network error. Please check your connection and try again.",
      geolocationError: "Unable to fetch location. Please allow location access or enter a location manually.",
      currentWeather: "Current Weather",
      forecast: "5-Day Forecast",
      date: "Date",
      description: "Description",
      temperature: "Temperature",
      humidity: "Humidity",
      wind: "Wind Speed",
      maxMin: "Max/Min Temp",
      cloudiness: "Cloudiness",
      pressure: "Pressure",
      visibility: "Visibility",
      dewPoint: "Dew Point",
      feelsLike: "Feels Like",
      alerts: "Weather Alerts",
      noAlerts: "No active weather alerts.",
      farmingTips: "Farming Tips",
      loading: "Loading...",
      celsius: "Celsius",
      fahrenheit: "Fahrenheit",
      tips: {
        highTemp: "High temperatures detected. Ensure crops are well-watered and consider shade nets.",
        lowHumidity: "Low humidity may dry out soil. Increase irrigation frequency.",
        highWind: "Strong winds expected. Secure loose equipment and check crop supports.",
        rain: "Rain expected. Delay fertilizer application to avoid runoff.",
      },
    },
    hi: {
      heading: "ЁЯМ╛ рдХрд┐рд╕рд╛рди-рдЕрдиреБрдХреВрд▓ рдореМрд╕рдо рдРрдк",
      placeholder: "рдкрд┐рдирдХреЛрдб / рдЧрд╛рдБрд╡ / рдЬрд┐рд▓рд╛ рджрд░реНрдЬ рдХрд░реЗрдВ",
      search: "рдЦреЛрдЬреЗрдВ",
      geolocation: "рдореЗрд░реА рд╕реНрдерд┐рддрд┐ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
      error: "рд╕реНрдерд╛рди рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рд╡реИрдз рдкрд┐рдирдХреЛрдб, рдЧрд╛рдБрд╡ рдпрд╛ рдЬрд┐рд▓рд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВред",
      networkError: "рдиреЗрдЯрд╡рд░реНрдХ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдХрдиреЗрдХреНрд╢рди рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
      geolocationError: "рд╕реНрдерд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рдЕрд╕рдорд░реНрдеред рдХреГрдкрдпрд╛ рд╕реНрдерд╛рди рдкрд╣реБрдВрдЪ рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВ рдпрд╛ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рд╕реНрдерд╛рди рджрд░реНрдЬ рдХрд░реЗрдВред",
      currentWeather: "рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо",
      forecast: "5-рджрд┐рди рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
      date: "рддрд╛рд░реАрдЦ",
      description: "рд╡рд┐рд╡рд░рдг",
      temperature: "рддрд╛рдкрдорд╛рди",
      humidity: "рдирдореА",
      wind: "рд╣рд╡рд╛ рдХреА рдЧрддрд┐",
      maxMin: "рдЕрдзрд┐рдХрддрдо/рдиреНрдпреВрдирддрдо рддрд╛рдк",
      cloudiness: "рдмрд╛рджрд▓",
      pressure: "рджрдмрд╛рд╡",
      visibility: "рджреГрд╢реНрдпрддрд╛",
      dewPoint: "рдУрд╕ рдмрд┐рдВрджреБ",
      feelsLike: "рдорд╣рд╕реВрд╕ рд╣реЛрддрд╛ рд╣реИ",
      alerts: "рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдирд┐рдпрд╛рдБ",
      noAlerts: "рдХреЛрдИ рд╕рдХреНрд░рд┐рдп рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА рдирд╣реАрдВред",
      farmingTips: "рдХреГрд╖рд┐ рд╕реБрдЭрд╛рд╡",
      loading: "рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
      celsius: "рд╕реЗрд▓реНрд╕рд┐рдпрд╕",
      fahrenheit: "рдлрд╝рд╛рд░реЗрдирд╣рд╛рдЗрдЯ",
      tips: {
        highTemp: "рдЙрдЪреНрдЪ рддрд╛рдкрдорд╛рди рдХрд╛ рдкрддрд╛ рдЪрд▓рд╛ред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдлрд╕рд▓реЗрдВ рдЕрдЪреНрдЫреА рддрд░рд╣ рд╕реЗ рдкрд╛рдиреА рдкрд┐рд▓рд╛рдИ рдЧрдИ рд╣реИрдВ рдФрд░ рдЫрд╛рдпрд╛ рдЬрд╛рд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        lowHumidity: "рдХрдо рдирдореА рдорд┐рдЯреНрдЯреА рдХреЛ рд╕реБрдЦрд╛ рд╕рдХрддреА рд╣реИред рд╕рд┐рдВрдЪрд╛рдИ рдХреА рдЖрд╡реГрддреНрддрд┐ рдмрдврд╝рд╛рдПрдБред",
        highWind: "рддреЗрдЬрд╝ рд╣рд╡рд╛рдПрдБ рдЕрдкреЗрдХреНрд╖рд┐рддред рдвреАрд▓реЗ рдЙрдкрдХрд░рдгреЛрдВ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рдХрд░реЗрдВ рдФрд░ рдлрд╕рд▓ рд╕рд╣рд╛рд░реЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВред",
        rain: "рдмрд╛рд░рд┐рд╢ рдХреА рдЙрдореНрдореАрджред рд░рдирдСрдл рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдЙрд░реНрд╡рд░рдХ рдкреНрд░рдпреЛрдЧ рдореЗрдВ рджреЗрд░реА рдХрд░реЗрдВред",
      },
    },
    bho: {
      heading: "ЁЯМ╛ рдХрд┐рд╕рд╛рди рдХреЗ рд▓рд┐рдпреЗ рдореМрд╕рдо рдРрдк",
      placeholder: "рдкрд┐рдирдХреЛрдб / рдЧрд╛рдБрд╡ / рдЬрд┐рд▓рд╛ рдбрд╛рд▓s",
      search: "рдЦреЛрдЬs",
      geolocation: "рд╣рдорд╛рд░ рд▓реЛрдХреЗрд╢рди рдмреНрдпрд╡рд╣рд╛рд░ рдХрд░s",
      error: "рдЬрдЧрд╣ рдирд╛ рдорд┐рд▓рд▓ред рдХреГрдкрдпрд╛ рд╕рд╣реА рдкрд┐рдирдХреЛрдб, рдЧрд╛рдБрд╡, рдпрд╛ рдЬрд┐рд▓рд╛ рдХреЗ рдирд╛рдо рдбрд╛рд▓sред",
      networkError: "рдиреЗрдЯрд╡рд░реНрдХ рдореЗрдВ рдЧрдбрд╝рдмрдбрд╝ред рдХреГрдкрдпрд╛ рдХрдиреЗрдХреНрд╢рди рдЪреЗрдХ рдХрд░s рдЖ рдкреБрдирдГ рдХреЛрд╢рд┐рд╢ рдХрд░sред",
      geolocationError: "рд▓реЛрдХреЗрд╢рди рдирд╛ рдорд┐рд▓ рдкрд╛рд╡реЗред рдХреГрдкрдпрд╛ рд▓реЛрдХреЗрд╢рди рдХреЗ рдЕрдиреБрдорддрд┐ рджs рдпрд╛ рдореИрдиреБрдЕрд▓ рдЬрдЧрд╣ рдбрд╛рд▓sред",
      currentWeather: "рдЕрднреА рдХреЗ рдореМрд╕рдо",
      forecast: "5-рджрд┐рди рдХреЗ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
      date: "рддрд╛рд░реАрдЦ",
      description: "рд╡рд┐рд╡рд░рдг",
      temperature: "рддрд╛рдкрдорд╛рди",
      humidity: "рдирдореА",
      wind: "рд╣рд╡рд╛ рдХреЗ рдЧрддрд┐",
      maxMin: "рдЬреНрдпрд╛рджрд╛/рдХрдо рддрд╛рдк",
      cloudiness: "рдмрд╛рджрд░",
      pressure: "рджрдмрд╛рд╡",
      visibility: "рджрд┐рдЦрд╛рдИ",
      dewPoint: "рдУрд╕ рдмрд┐рдВрджреБ",
      feelsLike: "рд▓рд╛рдЧреЗ рд▓s",
      alerts: "рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА",
      noAlerts: "рдХреЛрдИ рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА рдирдЗрдЦреЗред",
      farmingTips: "рдЦреЗрддреА рдХреЗ рд╕реБрдЭрд╛рд╡",
      loading: "рд▓реЛрдб рд╣реЛ рд░рд╣рд▓ рдмрд╛...",
      celsius: "рд╕реЗрд▓реНрд╕рд┐рдпрд╕",
      fahrenheit: "рдлрд╛рд░реЗрдирд╣рд╛рдЗрдЯ",
      tips: {
        highTemp: "рдЬреНрдпрд╛рджрд╛ рддрд╛рдкрдорд╛рди рдорд┐рд▓рд▓ред рдлрд╕рд▓рди рдХреЗ рдЕрдЪреНрдЫреЗ рд╕реЗ рдкрд╛рдиреА рджs рдЖ рдЫрд╛рдпрд╛ рдЬрд╛рд▓ рдХреЗ рдмреНрдпрд╡рд╣рд╛рд░ рдХрд░sред",
        lowHumidity: "рдХрдо рдирдореА рдорд┐рдЯреНрдЯреА рд╕реБрдЦрд╛ рджреЗрдд рдмрд╛ред рдкрд╛рдиреА рджреЗ рдХреЗ рдмрд╛рд░-рдмрд╛рд░ рдХрд░sред",
        highWind: "рддреЗрдЬрд╝ рд╣рд╡рд╛ рдЖрд╡реЗ рд╡рд╛рд▓рд╛ рдмрд╛ред рдвреАрд▓рд╛ рд╕рд╛рдорд╛рди рдмрд╛рдБрдзs рдЖ рдлрд╕рд▓ рдХреЗ рд╕рд╣рд╛рд░рд╛ рдЪреЗрдХ рдХрд░sред",
        rain: "рдмрд░рдЦрд╛ рдХреЗ рдЙрдореНрдореАрдж рдмрд╛ред рдЦрд╛рдж рджреЗ рдореЗрдВ рджреЗрд░реА рдХрд░s рддрд╛рдХрд┐ рдмрд╣ рдирд╛ рдЬрд╛рд╡ред",
      },
    },
    mr: {
      heading: "ЁЯМ╛ рд╢реЗрддрдХрд░реА-рдЕрдиреБрдХреВрд▓ рд╣рд╡рд╛рдорд╛рди рдЕреЕрдк",
      placeholder: "рдкрд┐рдирдХреЛрдб / рдЧрд╛рд╡ / рдЬрд┐рд▓реНрд╣рд╛ рдЯрд╛рдХрд╛",
      search: "рд╢реЛрдзрд╛",
      geolocation: "рдорд╛рдЭреЗ рд╕реНрдерд╛рди рд╡рд╛рдкрд░рд╛",
      error: "рд╕реНрдерд╛рди рд╕рд╛рдкрдбрд▓реЗ рдирд╛рд╣реА. рдХреГрдкрдпрд╛ рд╡реИрдз рдкрд┐рдирдХреЛрдб, рдЧрд╛рд╡ рдХрд┐рдВрд╡рд╛ рдЬрд┐рд▓реНрд╣реНрдпрд╛рдЪреЗ рдирд╛рд╡ рдЯрд╛рдХрд╛.",
      networkError: "рдиреЗрдЯрд╡рд░реНрдХ рддреНрд░реБрдЯреА. рдХреГрдкрдпрд╛ рддреБрдордЪреЗ рдХрдиреЗрдХреНрд╢рди рддрдкрд╛рд╕рд╛ рдЖрдгрд┐ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
      geolocationError: "рд╕реНрдерд╛рди рдорд┐рд│рд╡рдгреНрдпрд╛рдд рдЕрдХреНрд╖рдо. рдХреГрдкрдпрд╛ рд╕реНрдерд╛рди рдкреНрд░рд╡реЗрд╢рд╛рд╕ рдкрд░рд╡рд╛рдирдЧреА рджреНрдпрд╛ рдХрд┐рдВрд╡рд╛ рд╕реНрдерд╛рди рдореЕрдиреНрдпреБрдЕрд▓реА рдЯрд╛рдХрд╛.",
      currentWeather: "рд╕рдзреНрдпрд╛рдЪреЗ рд╣рд╡рд╛рдорд╛рди",
      forecast: "5-рджрд┐рд╡рд╕рд╛рдВрдЪрд╛ рдЕрдВрджрд╛рдЬ",
      date: "рддрд╛рд░реАрдЦ",
      description: "рд╡рд░реНрдгрди",
      temperature: "рддрд╛рдкрдорд╛рди",
      humidity: "рдЖрд░реНрджреНрд░рддрд╛",
      wind: "рд╡рд╛рд▒реНрдпрд╛рдЪрд╛ рд╡реЗрдЧ",
      maxMin: "рдХрдорд╛рд▓/рдХрд┐рдорд╛рди рддрд╛рдкрдорд╛рди",
      cloudiness: "рдврдЧ",
      pressure: "рджрд╛рдм",
      visibility: "рджреГрд╢реНрдпрдорд╛рдирддрд╛",
      dewPoint: "рджрд╡рдмрд┐рдВрджреВ",
      feelsLike: "рдЬрд╛рдгрд╡рддреЗ",
      alerts: "рд╣рд╡рд╛рдорд╛рди рд╕реВрдЪрдирд╛",
      noAlerts: "рдХреЛрдгрддреНрдпрд╛рд╣реА рд╕рдХреНрд░рд┐рдп рд╣рд╡рд╛рдорд╛рди рд╕реВрдЪрдирд╛ рдирд╛рд╣реАрдд.",
      farmingTips: "рд╢реЗрддреА рд╕рд▓реНрд▓рд╛",
      loading: "рд▓реЛрдб рд╣реЛрдд рдЖрд╣реЗ...",
      celsius: "рд╕реЗрд▓реНрд╕рд┐рдпрд╕",
      fahrenheit: "рдлреЕрд░реЗрдирд╣рд╛рдЗрдЯ",
      tips: {
        highTemp: "рдЙрдЪреНрдЪ рддрд╛рдкрдорд╛рди рдЖрдврд│рд▓реЗ. рдкрд┐рдХрд╛рдВрдирд╛ рдкреБрд░реЗрд╕реЗ рдкрд╛рдгреА рджреНрдпрд╛ рдЖрдгрд┐ рдЫрд╛рдпрд╛рдЬрд╛рд│реАрдЪрд╛ рд╡рд╛рдкрд░ рдХрд░рд╛.",
        lowHumidity: "рдХрдо рдЖрд░реНрджреНрд░рддрд╛ рдорд╛рддреА рдХреЛрд░рдбреА рдХрд░реВ рд╢рдХрддреЗ. рдкрд╛рдгреНрдпрд╛рдЪреА рд╡рд╛рд░рдВрд╡рд╛рд░рддрд╛ рд╡рд╛рдврд╡рд╛.",
        highWind: "рдЬреЛрд░рджрд╛рд░ рд╡рд╛рд░реЗ рдЕрдкреЗрдХреНрд╖рд┐рдд. рд╕реИрд▓ рдЙрдкрдХрд░рдгреЗ рд╕реБрд░рдХреНрд╖рд┐рдд рдХрд░рд╛ рдЖрдгрд┐ рдкрд┐рдХрд╛рдВрдЪреНрдпрд╛ рдЖрдзрд╛рд░рд╛рдЪреА рддрдкрд╛рд╕рдгреА рдХрд░рд╛.",
        rain: "рдкрд╛рдКрд╕ рдЕрдкреЗрдХреНрд╖рд┐рдд. рдЦрддреЗ рджреЗрдгреНрдпрд╛рд╕ рд╡рд┐рд▓рдВрдм рдХрд░рд╛ рдЬреЗрдгреЗрдХрд░реВрди рддреЗ рд╡рд╛рд╣реВрди рдЬрд╛рдК рдирдпреЗуАВ",
      },
    },
    bn: {
      heading: "ЁЯМ╛ ржХрзГрж╖ржХ-ржмрж╛ржирзНржзржм ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржЕрзНржпрж╛ржк",
      placeholder: "ржкрж┐ржиржХрзЛржб / ржЧрзНрж░рж╛ржо / ржЬрзЗрж▓рж╛ рж▓рж┐ржЦрзБржи",
      search: "ржЕржирзБрж╕ржирзНржзрж╛ржи",
      geolocation: "ржЖржорж╛рж░ ржЕржмрж╕рзНржерж╛ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи",
      error: "рж╕рзНржерж╛ржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз ржкрж┐ржиржХрзЛржб, ржЧрзНрж░рж╛ржо ржмрж╛ ржЬрзЗрж▓рж╛рж░ ржирж╛ржо рж▓рж┐ржЦрзБржиред",
      networkError: "ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рждрзНрж░рзБржЯрж┐ред ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ рж╕ржВржпрзЛржЧ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
      geolocationError: "ржЕржмрж╕рзНржерж╛ржи ржкрзЗрждрзЗ ржЕржХрзНрж╖ржоред ржжржпрж╝рж╛ ржХрж░рзЗ ржЕржмрж╕рзНржерж╛ржи ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕рзЗрж░ ржЕржирзБржорждрж┐ ржжрж┐ржи ржмрж╛ ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓рж┐ ржЕржмрж╕рзНржерж╛ржи рж▓рж┐ржЦрзБржиред",
      currentWeather: "ржмрж░рзНрждржорж╛ржи ржЖржмрж╣рж╛ржУржпрж╝рж╛",
      forecast: "рзл-ржжрж┐ржирзЗрж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕",
      date: "рждрж╛рж░рж┐ржЦ",
      description: "ржмрж┐ржмрж░ржг",
      temperature: "рждрж╛ржкржорж╛рждрзНрж░рж╛",
      humidity: "ржЖрж░рзНржжрзНрж░рждрж╛",
      wind: "ржмрж╛рждрж╛рж╕рзЗрж░ ржЧрждрж┐",
      maxMin: "рж╕рж░рзНржмрзЛржЪрзНржЪ/рж╕рж░рзНржмржирж┐ржорзНржи рждрж╛ржк",
      cloudiness: "ржорзЗржШрж▓рж╛",
      pressure: "ржЪрж╛ржк",
      visibility: "ржжрзГрж╢рзНржпржорж╛ржирждрж╛",
      dewPoint: "рж╢рж┐рж╢рж┐рж░ ржмрж┐ржирзНржжрзБ",
      feelsLike: "ржЕржирзБржнрзВрждрж┐",
      alerts: "ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ рж╕рждрж░рзНржХрждрж╛",
      noAlerts: "ржХрзЛржиржУ рж╕ржХрзНрж░рж┐ржпрж╝ ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ рж╕рждрж░рзНржХрждрж╛ ржирзЗржЗред",
      farmingTips: "ржХрзГрж╖рж┐ ржкрж░рж╛ржорж░рзНрж╢",
      loading: "рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...",
      celsius: "рж╕рзЗрж▓рж╕рж┐ржпрж╝рж╛рж╕",
      fahrenheit: "ржлрж╛рж░рзЗржирж╣рж╛ржЗржЯ",
      tips: {
        highTemp: "ржЙржЪрзНржЪ рждрж╛ржкржорж╛рждрзНрж░рж╛ рж╕ржирж╛ржХрзНржд рж╣ржпрж╝рзЗржЫрзЗред ржлрж╕рж▓ ржнрж╛рж▓ржнрж╛ржмрзЗ ржЬрж▓ ржжрзЗржУржпрж╝рж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржПржмржВ ржЫрж╛ржпрж╝рж╛ ржЬрж╛рж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред",
        lowHumidity: "ржХржо ржЖрж░рзНржжрзНрж░рждрж╛ ржорж╛ржЯрж┐ рж╢рзБржХрж┐ржпрж╝рзЗ ржжрж┐рждрзЗ ржкрж╛рж░рзЗред рж╕рзЗржЪрзЗрж░ ржлрзНрж░рж┐ржХрзЛржпрж╝рзЗржирзНрж╕рж┐ ржмрж╛ржбрж╝рж╛ржиред",
        highWind: "ржкрзНрж░ржмрж▓ ржмрж╛рждрж╛рж╕ ржкрзНрж░рждрзНржпрж╛рж╢рж┐рждред ржЖрж▓ржЧрж╛ рж╕рж░ржЮрзНржЬрж╛ржо рж╕рзБрж░ржХрзНрж╖рж┐ржд ржХрж░рзБржи ржПржмржВ ржлрж╕рж▓рзЗрж░ рж╕ржорж░рзНржержи ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред",
        rain: "ржмрзГрж╖рзНржЯрж┐ ржкрзНрж░рждрзНржпрж╛рж╢рж┐рждред рж░рж╛ржиржЕржл ржПржбрж╝рж╛рждрзЗ рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧрзЗ ржмрж┐рж▓ржорзНржм ржХрж░рзБржиред",
      },
    },
    as: {
      heading: "ЁЯМ╛ ржХрзГрж╖ржХ-ржмржирзНржзрзБрждрзНржмржкрзВрз░рзНржг ржмрждрз░ ржПржк",
      placeholder: "ржкрж┐ржиржХтАЩржб / ржЧрж╛ржБржУ / ржЬрж┐рж▓рж╛ рж╕рзБржорзБрз▒рж╛ржУржХ",
      search: "рж╕ржирзНржзрж╛ржи ржХрз░ржХ",
      geolocation: "ржорзЛрз░ ржЕрз▒рж╕рзНржерж╛ржи ржмрзНржпрз▒рж╣рж╛рз░ ржХрз░ржХ",
      error: "рж╕рзНржерж╛ржи ржмрж┐ржЪрж╛рз░рж┐ ржкрзЛрз▒рж╛ ржиржЧтАЩрж▓ред ржЕржирзБржЧрзНрз░рж╣ ржХрз░рж┐ ржПржЯрж╛ ржмрзИржз ржкрж┐ржиржХтАЩржб, ржЧрж╛ржБржУ ржмрж╛ ржЬрж┐рж▓рж╛рз░ ржирж╛ржо рж╕рзБржорзБрз▒рж╛ржУржХред",
      networkError: "ржирзЗржЯрз▒рз░рзНржХржд рждрзНрз░рзБржЯрж┐ред ржЕржирзБржЧрзНрз░рж╣ ржХрз░рж┐ ржЖржкрзЛржирж╛рз░ рж╕ржВржпрзЛржЧ ржкрз░рзАржХрзНрж╖рж╛ ржХрз░ржХ ржЖрз░рзБ ржкрзБржирз░ ржЪрзЗрж╖рзНржЯрж╛ ржХрз░ржХред",
      geolocationError: "ржЕрз▒рж╕рзНржерж╛ржи рж▓рж╛ржн ржХрз░рж┐ржмрж▓рзИ ржЕржХрзНрж╖ржоред ржЕржирзБржЧрзНрз░рж╣ ржХрз░рж┐ ржЕрз▒рж╕рзНржерж╛ржирз░ ржкрзНрз░рз▒рзЗрж╢рз░ ржЕржирзБржорждрж┐ ржжрж┐ржпрж╝ржХ ржмрж╛ ржорзЗржирзБрз▒рзЗрж▓рзА ржЕрз▒рж╕рзНржерж╛ржи рж╕рзБржорзБрз▒рж╛ржУржХред",
      currentWeather: "ржмрз░рзНрждржорж╛ржирз░ ржмрждрз░",
      forecast: "рзл-ржжрж┐ржирзАржпрж╝рж╛ ржкрзВрз░рзНржмрж╛ржнрж╛рж╕",
      date: "рждрж╛рз░рж┐ржЦ",
      description: "ржмрж┐рз▒рз░ржг",
      temperature: "рждрж╛ржкржорж╛рждрзНрз░рж╛",
      humidity: "ржЖрз░рзНржжрзНрз░рждрж╛",
      wind: "ржмрждрж╛рж╣рз░ ржЧрждрж┐",
      maxMin: "рж╕рз░рзНржмрж╛ржзрж┐ржХ/рж╕рз░рзНржмржирж┐ржорзНржи рждрж╛ржк",
      cloudiness: "ржорзЗржШрж╛ржЪрзНржЫржирзНржирждрж╛",
      pressure: "ржЪрж╛ржк",
      visibility: "ржжрзГрж╢рзНржпржорж╛ржирждрж╛",
      dewPoint: "рж╢рж┐рж╢рж┐рз░ ржмрж┐ржирзНржжрзБ",
      feelsLike: "ржЕржирзБржнрз▒ рж╣ржпрж╝",
      alerts: "ржмрждрз░рз░ рж╕рждрз░рзНржХржмрж╛рз░рзНрждрж╛",
      noAlerts: "ржХрзЛржирзЛ рж╕ржХрзНрз░рж┐ржпрж╝ ржмрждрз░рз░ рж╕рждрз░рзНржХржмрж╛рз░рзНрждрж╛ ржирж╛ржЗред",
      farmingTips: "ржХрзГрж╖рж┐ ржкрз░рж╛ржорз░рзНрж╢",
      loading: "рж▓рзЛржб рж╣рзИ ржЖржЫрзЗ...",
      celsius: "ржЪрзЗрж▓ржЫрж┐ржпрж╝рж╛ржЫ",
      fahrenheit: "ржлрж╛рз░рзЗржирж╣рж╛ржЗржЯ",
      tips: {
        highTemp: "ржЙржЪрзНржЪ рждрж╛ржкржорж╛рждрзНрз░рж╛ ржзрз░рж╛ ржкрз░рж┐ржЫрзЗред рж╢рж╕рзНржп ржнрж╛рж▓ржжрз░рзЗ ржкрж╛ржирзА ржжрж┐ржпрж╝ржХ ржЖрз░рзБ ржЫрж╛ржБрз░ ржЬрж╛рж▓ ржмрзНржпрз▒рж╣рж╛рз░ ржХрз░ржХред",
        lowHumidity: "ржХржо ржЖрз░рзНржжрзНрз░рждрж╛ржЗ ржорж╛ржЯрж┐ рж╢рзБржХрзБрз▒рж╛ржм ржкрж╛рз░рзЗред рж╕рж┐ржЮрзНржЪржирз░ ржХржорзНржкрж╛ржЩрзНржХ ржмржврж╝рж╛ржУржХред",
        highWind: "ржкрзНрз░ржмрж▓ ржмрждрж╛рж╣рз░ ржЖрж╢ржВржХрж╛ред ржЖрж▓ржЧрж╛ рж╕ржБржЬрзБрж▓рж┐ рж╕рзБрз░ржХрзНрж╖рж┐ржд ржХрз░ржХ ржЖрз░рзБ рж╢рж╕рзНржпрз░ рж╕ржорз░рзНржержи ржкрз░рзАржХрзНрж╖рж╛ ржХрз░ржХред",
        rain: "ржмрз░рж╖рзБржгрз░ ржЖрж╢ржВржХрж╛ред ржкрзНрз░ржмрж╛рж╣рз░ ржкрз░рж╛ ржмрж╛ржБржЪрж┐ржмрж▓рзИ рж╕рж╛рз░ ржкрзНрз░ржпрж╝рзЛржЧржд ржкрж▓ржо ржХрз░ржХред",
      },
    },
    sa: {
      heading: "ЁЯМ╛ рдХреГрд╖рдХ-рдореИрддреНрд░реАрдкреВрд░реНрдг-рд╡рд╛рддрд╛рд╡рд░рдг-рд╕рдВрдирд╛рджрддрд┐",
      placeholder: "рдкрд┐рдирдХреЛрдбреН / рдЧреНрд░рд╛рдордГ / рдордгреНрдбрд▓рдВ рдкреНрд░рд╡рд┐рд╖реНрдЯреБ",
      search: "рд╕рдиреНрджреАрдХреНрд╖рд╛",
      geolocation: "рдордо рд╕реНрдерд╛рдирдВ рд╕рдВрдирд╛рджрддрд┐",
      error: "рд╕реНрдерд╛рдирдВ рди рд╕рдВрдирд╛рджрддрд┐ред рдХреГрдкрдпрд╛ рд╡реИрдзрдВ рдкрд┐рдирдХреЛрдбреН, рдЧреНрд░рд╛рдордВ рд╡рд╛ рдордгреНрдбрд▓рдирд╛рдо рдкреНрд░рд╡рд┐рд╖реНрдЯреБред",
      networkError: "рд╕рдЮреНрдЬрд╛рд▓рджреЛрд╖рдГред рдХреГрдкрдпрд╛ рд╕рдВрдирд╛рджрдирдВ рдкрд░реАрдХреНрд╖реНрдп рдкреБрдирдГ рдкреНрд░рдпрддреНрдирддреБред",
      geolocationError: "рд╕реНрдерд╛рдирдВ рдкреНрд░рд╛рдкреНрдиреБрдВ рди рд╢рдХреНрдпрддрд┐ред рдХреГрдкрдпрд╛ рд╕реНрдерд╛рдирдкреНрд░рд╡реЗрд╢рд╕реНрдп рдЕрдиреБрдЬреНрдЮрд╛рдВ рджрджрд╛рддреБ рдЕрдерд╡рд╛ рдореИрдиреНрдпреБрдЕрд▓рд░реВрдкреЗрдг рд╕реНрдерд╛рдирдВ рдкреНрд░рд╡рд┐рд╖реНрдЯреБред",
      currentWeather: "рд╡рд░реНрддрдорд╛рдирд╡рд╛рддрд╛рд╡рд░рдгрдореН",
      forecast: "рдкрдЮреНрдЪрджрд┐рдиреАрдпрдВ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рдирдореН",
      date: "рджрд┐рдирд╛рдЩреНрдХрдГ",
      description: "рд╡рд┐рд╡рд░рдгрдореН",
      temperature: "рддрд╛рдкрдорд╛рдирдореН",
      humidity: "рдЖрд░реНрджреНрд░рддрд╛",
      wind: "рд╡рд╛рдпреЛрдГ рд╡реЗрдЧрдГ",
      maxMin: "рдЕрдзрд┐рдХрддрдо/рдиреНрдпреВрдирддрдо рддрд╛рдкрдорд╛рдирдореН",
      cloudiness: "рдореЗрдШрдЪреНрдЫрд╛рджрдирдореН",
      pressure: "рджрд╛рдмрдГ",
      visibility: "рджреГрд╢реНрдпрдорд╛рдирддрд╛",
      dewPoint: "рд╢реАрддрдмрд┐рдиреНрджреБрдГ",
      feelsLike: "рд╕рдВрдирд╛рджрддрд┐",
      alerts: "рд╡рд╛рддрд╛рд╡рд░рдгрд╕реВрдЪрдирд╛рдГ",
      noAlerts: "рдХрд╛рдкрд┐ рд╕рдХреНрд░рд┐рдпрдВ рд╡рд╛рддрд╛рд╡рд░рдгрд╕реВрдЪрдирд╛ рдирд╛рд╕реНрддрд┐ред",
      farmingTips: "рдХреГрд╖рд┐рд╕рдВрдирд╛рджрдирдореН",
      loading: "рднрд╛рд░рддрд┐...",
      celsius: "рд╕реЗрд▓реНрд╕рд┐рдпрд╕реН",
      fahrenheit: "рдлрд╛рд░реЗрдирд╣рд╛рдЗрдЯреН",
      tips: {
        highTemp: "рдЙрдЪреНрдЪрдВ рддрд╛рдкрдорд╛рдирдВ рд╕рдВрдирд╛рджрддрд┐ред рд╕рд╕реНрдпрд╛рдирд╛рдВ рд╕рдореНрдпрдХреН рд╕реЗрдЪрдирдВ рдХреБрд░реБ рдЪ рдЫрд╛рдпрд╛рдЬрд╛рд▓рдВ рд╕рдВрдирд╛рджрддрд┐ред",
        lowHumidity: "рдиреНрдпреВрдирд╛ рдЖрд░реНрджреНрд░рддрд╛ рднреВрдорд┐рдВ рд╢реБрд╖реНрдХрддрд┐ред рд╕реЗрдЪрдирд╕реНрдп рд╕рдВрдирд╛рджрдирдВ рд╡рд░реНрдзрддрд┐ред",
        highWind: "рдкреНрд░рдмрд▓рд╡рд╛рдпрд╡рдГ рд╕рдВрдирд╛рджрддрд┐ред рдореБрдХреНрддрдВ рдпрдиреНрддреНрд░рдВ рд╕рдВрдирд╛рджрддрд┐ рдЪ рд╕рд╕реНрдпрд╕рд╣рд╛рдпрдВ рдкрд░реАрдХреНрд╖рддрд┐ред",
        rain: "рд╡рд░реНрд╖рдВ рд╕рдВрдирд╛рджрддрд┐ред рдкреНрд░рдХреНрд╖рд╛рд▓рдиреЗрди рд╕рдВрдирд╛рджрддрд┐ рдЦрд╛рджрд╕реНрдп рд╕рдВрдирд╛рджрдиреЗ рд╡рд┐рд▓рдореНрдмрдВ рдХреБрд░реБред",
      },
    },
  };

  const getWeather = async (query) => {
    setLoading(true);
    setError("");
    try {
      const apiKey = import.meta.env.VITE_APP_WEATHER_API_KEY;
      const currentResponse = await axios.get(
        `https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${apiKey}&units=${unit}&lang=${lang}`
      );
      setCurrentWeather(currentResponse.data);
      const forecastResponse = await axios.get(
        `https://api.openweathermap.org/data/2.5/forecast?q=${query}&appid=${apiKey}&units=${unit}&lang=${lang}`
      );
      const filteredData = forecastResponse.data.list.filter(
        (reading, index) => index % 8 === 0
      );
      setWeatherData(filteredData);
    } catch (error) {
      console.error("Error fetching weather data:", error);
      setError(
        error.response?.status === 404
          ? translations[lang].error
          : translations[lang].networkError
      );
    } finally {
      setLoading(false);
    }
  };

  const getWeatherByGeolocation = () => {
    setLoading(true);
    setError("");
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;
          try {
            const apiKey = import.meta.env.VITE_APP_WEATHER_API_KEY;
            const currentResponse = await axios.get(
              `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=${unit}&lang=${lang}`
            );
            setCurrentWeather(currentResponse.data);
            const forecastResponse = await axios.get(
              `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=${unit}&lang=${lang}`
            );
            const filteredData = forecastResponse.data.list.filter(
              (reading, index) => index % 8 === 0
            );
            setWeatherData(filteredData);
            setLocation(currentResponse.data.name);
          } catch (error) {
            console.error("Error fetching geolocation weather:", error);
            setError(translations[lang].networkError);
          } finally {
            setLoading(false);
          }
        },
        () => {
          setError(translations[lang].geolocationError);
          setLoading(false);
        }
      );
    } else {
      setError(translations[lang].geolocationError);
      setLoading(false);
    }
  };

  const getFarmingTips = (weather) => {
    const tips = [];
    if (weather.main.temp > (unit === "metric" ? 30 : 86)) {
      tips.push(translations[lang].tips.highTemp);
    }
    if (weather.main.humidity < 40) {
      tips.push(translations[lang].tips.lowHumidity);
    }
    if (weather.wind.speed > (unit === "metric" ? 10 : 22)) {
      tips.push(translations[lang].tips.highWind);
    }
    if (weather.weather[0].main.toLowerCase().includes("rain")) {
      tips.push(translations[lang].tips.rain);
    }
    return tips.length > 0 ? tips : [translations[lang].tips.noTips];
  };

  return (
    <div
      className="min-h-screen bg-cover bg-center bg-no-repeat flex flex-col items-center pt-16 sm:pt-20 font-poppins"
      style={{ backgroundImage: `url(${backgroundImage})` }}
    >
      {/* рдиреЗрд╡рдмрд╛рд░ рдХреЗ рдкреАрдЫреЗ рд╣реЗрдбрд┐рдВрдЧ рдЫрд┐рдкрдиреЗ рдХреА рд╕рдорд╕реНрдпрд╛ рдХреЛ рдареАрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЯреЙрдк рдкреИрдбрд┐рдВрдЧ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ */}
      <div className="bg-white/10 backdrop-blur-lg p-6 sm:p-8 rounded-3xl shadow-2xl w-full max-w-5xl border border-white/20">
        <h1 className="text-3xl sm:text-4xl font-bold mb-6 text-center bg-gradient-to-r from-green-400 to-yellow-400 bg-clip-text text-transparent animate-fade-in">
          {translations[lang].heading}
        </h1>
        <div className="flex flex-col sm:flex-row justify-center gap-3 mb-6">
          <input
            type="text"
            placeholder={translations[lang].placeholder}
            className="p-3 rounded-full text-black focus:outline-none focus:ring-2 focus:ring-green-300 shadow-sm transition-all duration-300 w-full sm:w-60 bg-white/80"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
          />
          <select
            className="p-3 rounded-full text-black focus:outline-none focus:ring-2 focus:ring-green-300 shadow-sm transition-all duration-300 w-full sm:w-36 bg-white/80"
            value={lang}
            onChange={(e) => setLang(e.target.value)}
          >
            <option value="en">English</option>
            <option value="hi">рд╣рд┐рдиреНрджреА</option>
            <option value="bho">рднреЛрдЬрдкреБрд░реА</option>
            <option value="mr">рдорд░рд╛рдареА</option>
            <option value="bn">ржмрж╛ржВрж▓рж╛</option>
            <option value="as">ржЕрж╕ржорзАржпрж╝рж╛</option>
            <option value="sa">рд╕рдВрд╕реНрдХреГрддрдореН</option>
          </select>
          <select
            className="p-3 rounded-full text-black focus:outline-none focus:ring-2 focus:ring-green-300 shadow-sm transition-all duration-300 w-full sm:w-36 bg-white/80"
            value={unit}
            onChange={(e) => {
              setUnit(e.target.value);
              if (location) getWeather(location);
            }}
          >
            <option value="metric">{translations[lang].celsius}</option>
            <option value="imperial">{translations[lang].fahrenheit}</option>
          </select>
          <button
            className="bg-gradient-to-r from-green-500 to-teal-500 text-white px-5 py-3 rounded-full font-medium hover:from-green-600 hover:to-teal-600 transition-all duration-300 shadow-md flex items-center justify-center disabled:opacity-50"
            onClick={() => getWeather(location)}
            disabled={loading || !location}
          >
            <FaSearchLocation className="mr-2" /> {translations[lang].search}
          </button>
          <button
            className="bg-gradient-to-r from-blue-500 to-indigo-500 text-white px-5 py-3 rounded-full font-medium hover:from-blue-600 hover:to-indigo-600 transition-all duration-300 shadow-md flex items-center justify-center disabled:opacity-50"
            onClick={getWeatherByGeolocation}
            disabled={loading}
          >
            <FaMapMarkerAlt className="mr-2" /> {translations[lang].geolocation}
          </button>
        </div>

        {error && (
          <div className="bg-red-500/90 p-3 rounded-lg mb-6 text-center flex items-center justify-center text-sm">
            <FaExclamationTriangle className="mr-2" /> {error}
          </div>
        )}

        {loading && (
          <div className="text-center text-xl text-white animate-pulse flex items-center justify-center">
            <svg
              className="animate-spin h-6 w-6 mr-2 text-green-400"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              ></circle>
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
            {translations[lang].loading}
          </div>
        )}

        {currentWeather && !loading && (
          <div className="bg-white/20 backdrop-blur-md p-6 rounded-2xl shadow-lg mb-6 animate-fade-in">
            <h2 className="text-2xl font-semibold mb-4 text-center text-green-100">
              {translations[lang].currentWeather}
            </h2>
            <p className="text-center mb-4 capitalize text-lg font-medium text-white">
              {currentWeather.weather[0].description}
            </p>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-center mb-4">
              <div className="flex flex-col items-center">
                <FaTemperatureHigh className="text-3xl mb-2 text-yellow-300" />
                <p className="text-lg text-white">
                  {currentWeather.main.temp}┬░{unit === "metric" ? "C" : "F"}
                </p>
                <p className="text-xs text-green-200">{translations[lang].temperature}</p>
              </div>
              <div className="flex flex-col items-center">
                <FaTint className="text-3xl mb-2 text-blue-300" />
                <p className="text-lg text-white">{currentWeather.main.humidity}%</p>
                <p className="text-xs text-green-200">{translations[lang].humidity}</p>
              </div>
              <div className="flex flex-col items-center">
                <FaWind className="text-3xl mb-2 text-gray-300" />
                <p className="text-lg text-white">
                  {currentWeather.wind.speed} {unit === "metric" ? "m/s" : "mph"}
                </p>
                <p className="text-xs text-green-200">{translations[lang].wind}</p>
              </div>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm text-center text-white">
              <p className="flex items-center justify-center">
                <FaSun className="mr-2 text-yellow-300" /> {translations[lang].maxMin}:{" "}
                {currentWeather.main.temp_max}┬░{unit === "metric" ? "C" : "F"} /{" "}
                {currentWeather.main.temp_min}┬░{unit === "metric" ? "C" : "F"}
              </p>
              <p className="flex items-center justify-center">
                <FaCloud className="mr-2 text-gray-300" /> {translations[lang].cloudiness}:{" "}
                {currentWeather.clouds.all}%
              </p>
              <p className="flex items-center justify-center">
                <FaCompressArrowsAlt className="mr-2 text-blue-300" />{" "}
                {translations[lang].pressure}: {currentWeather.main.pressure} hPa
              </p>
              <p>
                {translations[lang].visibility}:{" "}
                {(currentWeather.visibility / 1000).toFixed(1)} km
              </p>
              <p>
                {translations[lang].feelsLike}:{" "}
                {currentWeather.main.feels_like}┬░{unit === "metric" ? "C" : "F"}
              </p>
            </div>
            <div className="mt-6">
              <h3 className="text-lg font-semibold mb-2 text-green-100">
                {translations[lang].farmingTips}
              </h3>
              <ul className="list-disc list-inside text-sm text-white">
                {getFarmingTips(currentWeather).map((tip, idx) => (
                  <li key={idx}>{tip}</li>
                ))}
              </ul>
            </div>
          </div>
        )}

        {weatherData.length > 0 && !loading && (
          <div className="mt-6">
            <h2 className="text-2xl font-semibold mb-4 text-center text-green-100">
              {translations[lang].forecast}
            </h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {weatherData.map((day, idx) => (
                <div
                  key={idx}
                  className="bg-white/20 backdrop-blur-md p-5 rounded-2xl shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300 animate-fade-in"
                >
                  <h3 className="text-lg font-semibold mb-3 text-center flex items-center justify-center text-white">
                    <FaRegClock className="mr-2 text-green-300" />
                    {new Date(day.dt_txt).toLocaleDateString(lang, {
                      weekday: "long",
                      month: "short",
                      day: "numeric",
                    })}
                  </h3>
                  <p className="text-center mb-3 capitalize text-base font-medium text-white">
                    {day.weather[0].description}
                  </p>
                  <div className="grid grid-cols-3 gap-2 text-center mb-3">
                    <div className="flex flex-col items-center">
                      <FaTemperatureHigh className="text-2xl mb-1 text-yellow-300" />
                      <p className="text-base text-white">
                        {day.main.temp}┬░{unit === "metric" ? "C" : "F"}
                      </p>
                      <p className="text-xs text-green-200">{translations[lang].temperature}</p>
                    </div>
                    <div className="flex flex-col items-center">
                      <FaTint className="text-2xl mb-1 text-blue-300" />
                      <p className="text-base text-white">{day.main.humidity}%</p>
                      <p className="text-xs text-green-200">{translations[lang].humidity}</p>
                    </div>
                    <div className="flex flex-col items-center">
                      <FaWind className="text-2xl mb-1 text-gray-300" />
                      <p className="text-base text-white">
                        {day.wind.speed} {unit === "metric" ? "m/s" : "mph"}
                      </p>
                      <p className="text-xs text-green-200">{translations[lang].wind}</p>
                    </div>
                  </div>
                  <div className="text-xs text-center space-y-1 text-white">
                    <p className="flex items-center justify-center">
                      <FaSun className="mr-1 text-yellow-300" /> {translations[lang].maxMin}:{" "}
                      {day.main.temp_max}┬░{unit === "metric" ? "C" : "F"} /{" "}
                      {day.main.temp_min}┬░{unit === "metric" ? "C" : "F"}
                    </p>
                    <p className="flex items-center justify-center">
                      <FaCloud className="mr-1 text-gray-300" /> {translations[lang].cloudiness}:{" "}
                      {day.clouds.all}%
                    </p>
                    <p className="flex items-center justify-center">
                      <FaCompressArrowsAlt className="mr-1 text-blue-300" />{" "}
                      {translations[lang].pressure}: {day.main.pressure} hPa
                    </p>
                    <p>
                      {translations[lang].visibility}:{" "}
                      {(day.visibility / 1000).toFixed(1)} km
                    </p>
                    <p>
                      {translations[lang].dewPoint}:{" "}
                      {(day.main.temp - (100 - day.main.humidity) / 5).toFixed(2)}┬░
                      {unit === "metric" ? "C" : "F"}
                    </p>
                    <p>
                      {translations[lang].feelsLike}: {day.main.feels_like}┬░
                      {unit === "metric" ? "C" : "F"}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
      <style>
        {`
          @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');
          .font-poppins {
            font-family: 'Poppins', sans-serif;
          }
          .animate-fade-in {
            animation: fadeIn 0.5s ease-in;
          }
          @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
          }
        `}
      </style>
    </div>
  );
};

export default WeatherApp;